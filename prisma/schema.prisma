// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum PresenceState {
  PRESENT
  ABSENT
  LATE
  EXCUSED
}

model Permission {
  id      Int     @id @default(autoincrement())
  name    String
  enabled Boolean @default(true)

  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
  UserPermission UserPermission[]
}

model AcademicYear {
  id        Int      @id @default(autoincrement())
  name      String
  startDate DateTime
  endDate   DateTime
  archives  Boolean  @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  presences     Presence[]
  gradePeriods  GradePeriodAcademicYear[]
  PresenceAudit PresenceAudit[]
}

model SchoolLevel {
  id      Int     @id @default(autoincrement())
  name    String
  order   Int
  enabled Boolean @default(true)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  classes  Class[]
  timeSlot TimeSlot[]
  group    Group[]
}

model Subject {
  id      Int     @id @default(autoincrement())
  name    String
  enabled Boolean @default(true)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  grades Grade[]
  group  Group[]
}

model User {
  id        Int     @id @default(autoincrement())
  firstName String
  lastName  String
  email     String? @unique
  password  String
  enabled   Boolean @default(true)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  presence           Presence[]
  disciplinaryReport DisciplinaryReport[]
  userClass          UserClass[]
  apiKey             ApiKey[]
  userGroup          UserGroup[]
  PresenceAuditBy    PresenceAudit[]      @relation(name: "ChangedByUser")
  PresenceAuditUser  PresenceAudit[]      @relation(name: "User")
  UserPermission     UserPermission[]
}

model Class {
  id            Int     @id @default(autoincrement())
  name          String
  schoolLevelId Int
  enabled       Boolean @default(true)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  schoolLevel SchoolLevel @relation(fields: [schoolLevelId], references: [id])
  students    Student[]
  userClasss  UserClass[]
}

model Student {
  id           Int       @id @default(autoincrement())
  firstName    String
  lastName     String
  dateOfBirth  DateTime?
  classId      Int?
  contactEmail String?
  enabled      Boolean   @default(true)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  class               Class?               @relation(fields: [classId], references: [id])
  grades              Grade[]
  disciplinaryReports DisciplinaryReport[]
  presence            Presence[]
  StudentGroup        StudentGroup[]
}

model Grade {
  id            Int     @id @default(autoincrement())
  value         Float
  studentId     Int
  subjectId     Int
  gradePeriodId Int
  groupId       Int
  enabled       Boolean @default(true)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  student     Student     @relation(fields: [studentId], references: [id])
  subject     Subject     @relation(fields: [subjectId], references: [id])
  gradePeriod GradePeriod @relation(fields: [gradePeriodId], references: [id])
}

model TimeSlot {
  id            Int     @id @default(autoincrement())
  name          String?
  startTime     String
  endTime       String
  schoolLevelId Int?
  enabled       Boolean @default(true)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  schoolLevel   SchoolLevel?    @relation(fields: [schoolLevelId], references: [id])
  presence      Presence[]
  PresenceAudit PresenceAudit[]
}

model Group {
  id        Int     @id @default(autoincrement())
  name      String
  subjectId Int
  enabled   Boolean @default(true)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  subject       Subject        @relation(fields: [subjectId], references: [id])
  StudentGroup  StudentGroup[]
  userGroup     UserGroup[]
  SchoolLevel   SchoolLevel?   @relation(fields: [schoolLevelId], references: [id])
  schoolLevelId Int?
}

model GradePeriod {
  id        Int      @id @default(autoincrement())
  name      String
  startDate DateTime
  endDate   DateTime
  enabled   Boolean  @default(true)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  grades        Grade[]
  academicYears GradePeriodAcademicYear[]
}

model Presence {
  id             Int           @id @default(autoincrement())
  studentId      Int
  state          PresenceState
  date           DateTime
  userId         Int
  academicYearId Int
  timeSlotId     Int
  groupId        Int
  processed      Boolean       @default(false)
  notified       Boolean       @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user          User            @relation(fields: [userId], references: [id])
  student       Student         @relation(fields: [studentId], references: [id])
  academicYear  AcademicYear    @relation(fields: [academicYearId], references: [id])
  timeSlot      TimeSlot        @relation(fields: [timeSlotId], references: [id])
  PresenceAudit PresenceAudit[]

  @@index([studentId, date])
}

model PresenceAudit {
  id             Int           @id @default(autoincrement())
  presenceId     Int
  state          PresenceState
  date           DateTime
  userId         Int
  academicYearId Int
  timeSlotId     Int
  groupId        Int
  processed      Boolean
  notified       Boolean
  changedBy      Int
  changedAt      DateTime      @default(now())

  presence      Presence     @relation(fields: [presenceId], references: [id])
  academicYear  AcademicYear @relation(fields: [academicYearId], references: [id])
  timeSlot      TimeSlot     @relation(fields: [timeSlotId], references: [id])
  changedByUser User         @relation(name: "ChangedByUser", fields: [changedBy], references: [id])
  user          User         @relation(name: "User", fields: [userId], references: [id])
}

model DisciplinaryReport {
  id          Int      @id @default(autoincrement())
  studentId   Int
  createdById Int
  date        DateTime
  description String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  createdBy User    @relation(fields: [createdById], references: [id])
  student   Student @relation(fields: [studentId], references: [id])
}

model ApiKey {
  id        Int      @id @default(autoincrement())
  name      String
  key       String   @unique
  userId    Int
  expiresAt DateTime
  enabled   Boolean  @default(true)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id])
}

// Many to Many relations, between GradePeriod and AcademicYear
model GradePeriodAcademicYear {
  id             Int @id @default(autoincrement())
  gradePeriodId  Int
  academicYearId Int

  gradePeriod  GradePeriod  @relation(fields: [gradePeriodId], references: [id])
  academicYear AcademicYear @relation(fields: [academicYearId], references: [id])
}

// Many to Many relations, between User and Class
model UserClass {
  id      Int @id @default(autoincrement())
  userId  Int
  classId Int

  user  User  @relation(fields: [userId], references: [id])
  class Class @relation(fields: [classId], references: [id])
}

// Many to Many relations, between User and Group
model UserGroup {
  id      Int @id @default(autoincrement())
  userId  Int
  groupId Int

  user  User  @relation(fields: [userId], references: [id])
  group Group @relation(fields: [groupId], references: [id])
}

// Many to Many relations, between Student and Group
model StudentGroup {
  id        Int @id @default(autoincrement())
  studentId Int
  groupId   Int

  student Student @relation(fields: [studentId], references: [id])
  group   Group   @relation(fields: [groupId], references: [id])
}

// Many to Many relations, between User and Permission
model UserPermission {
  id           Int @id @default(autoincrement())
  userId       Int
  permissionId Int

  user       User       @relation(fields: [userId], references: [id])
  permission Permission @relation(fields: [permissionId], references: [id])
}
