// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DATABASE_URL_NON_POOLING")
}

enum Role {
  ADMIN
  MANAGER
  TEACHER
}

enum AttendanceState {
  PRESENT
  ABSENT
  LATE
}

enum AbsencePeriodStatus {
  PENDING
  JUSTIFIED
  UNJUSTIFIED
}

model AbsencePeriod {
  id                    Int                 @id @default(autoincrement())
  studentId             Int
  firstAbsenceId        Int
  lastAbsenceId         Int
  nextPresenceId        Int?
  academicYearId        Int
  status                AbsencePeriodStatus @default(PENDING)
  justifyFromDate       DateTime?
  justifyToDate         DateTime?
  // @TODO: add relation to TimeSlot
  justifyFromTimeSlotId Int?
  justifyToTimeSlotId   Int?
  enabled               Boolean             @default(true)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  Student      Student                @relation(fields: [studentId], references: [id])
  AcademicYear AcademicYear           @relation(fields: [academicYearId], references: [id])
  FirstAbsence Attendance             @relation(fields: [firstAbsenceId], references: [id], name: "FirstAbsence")
  LastAbsence  Attendance             @relation(fields: [lastAbsenceId], references: [id], name: "LastAbsence")
  NextPresence Attendance?            @relation(fields: [nextPresenceId], references: [id], name: "NextPresence")
  Comments     AbsencePeriodComment[]
}

model AbsencePeriodComment {
  id              Int    @id @default(autoincrement())
  userId          Int
  absencePeriodId Int
  comment         String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  User          User          @relation(fields: [userId], references: [id])
  AbsencePeriod AbsencePeriod @relation(fields: [absencePeriodId], references: [id])
}

model AcademicYear {
  id        Int      @id @default(autoincrement())
  name      String
  startDate DateTime
  endDate   DateTime
  current   Boolean  @default(false)
  archives  Boolean  @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  Attendance      Attendance[]
  GradePeriods    GradePeriodAcademicYear[]
  AttendanceAudit AttendanceAudit[]
  AbsencePeriod   AbsencePeriod[]
}

model SchoolLevel {
  id      Int     @id @default(autoincrement())
  name    String
  order   Int
  enabled Boolean @default(true)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  Classes  Class[]
  TimeSlot TimeSlot[]
  Group    Group[]
}

model Subject {
  id      Int     @id @default(autoincrement())
  name    String
  enabled Boolean @default(true)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  Grades Grade[]
  Group  Group[]
}

model User {
  id                Int      @id @default(autoincrement())
  firstName         String
  lastName          String
  password          String
  enabled           Boolean  @default(true)
  role              Role
  email             String   @unique
  preferredLanguage String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  Attendance           Attendance[]
  DisciplinaryReport   DisciplinaryReport[]
  UserClass            UserClass[]
  ApiKey               ApiKey[]
  UserGroup            UserGroup[]
  AttendanceAuditBy    AttendanceAudit[]      @relation(name: "ChangedByUser")
  AttendanceAuditUser  AttendanceAudit[]      @relation(name: "User")
  AbsencePeriodComment AbsencePeriodComment[]
}

model Class {
  id            Int     @id @default(autoincrement())
  name          String
  schoolLevelId Int
  enabled       Boolean @default(true)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  SchoolLevel SchoolLevel @relation(fields: [schoolLevelId], references: [id])
  Students    Student[]
  UserClasss  UserClass[]
}

model Student {
  id           Int       @id @default(autoincrement())
  firstName    String
  lastName     String
  dateOfBirth  DateTime?
  classId      Int?
  contactEmail String?
  image        Boolean   @default(false)
  enabled      Boolean   @default(true)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  Class               Class?               @relation(fields: [classId], references: [id])
  Grades              Grade[]
  DisciplinaryReports DisciplinaryReport[]
  Attendance          Attendance[]
  StudentGroup        StudentGroup[]
  AbsencePeriod       AbsencePeriod[]
}

model Grade {
  id            Int     @id @default(autoincrement())
  value         Float
  studentId     Int
  subjectId     Int
  gradePeriodId Int
  groupId       Int
  enabled       Boolean @default(true)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  Student     Student     @relation(fields: [studentId], references: [id])
  Subject     Subject     @relation(fields: [subjectId], references: [id])
  GradePeriod GradePeriod @relation(fields: [gradePeriodId], references: [id])
}

model TimeSlotGroup {
  id   Int    @id @default(autoincrement())
  name String

  TimeSlot TimeSlot[]
}

model TimeSlot {
  id              Int     @id @default(autoincrement())
  name            String?
  startTime       String // should be XX:XX min is 00:00 max is 23:59
  endTime         String // should be XX:XX min is 00:00 max is 23:59
  schoolLevelId   Int?
  timeSlotGroupId Int
  enabled         Boolean @default(true)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  SchoolLevel     SchoolLevel?      @relation(fields: [schoolLevelId], references: [id])
  TimeSlotGroup   TimeSlotGroup     @relation(fields: [timeSlotGroupId], references: [id])
  Attendance      Attendance[]
  AttendanceAudit AttendanceAudit[]
}

model Group {
  id            Int     @id @default(autoincrement())
  ref           String
  name          String?
  subjectId     Int
  schoolLevelId Int?
  enabled       Boolean @default(true)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  Subject      Subject        @relation(fields: [subjectId], references: [id])
  StudentGroup StudentGroup[]
  UserGroup    UserGroup[]
  SchoolLevel  SchoolLevel?   @relation(fields: [schoolLevelId], references: [id])
  Attendance   Attendance[]
}

model GradePeriod {
  id        Int      @id @default(autoincrement())
  name      String
  startDate DateTime
  endDate   DateTime
  enabled   Boolean  @default(true)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  Grades        Grade[]
  AcademicYears GradePeriodAcademicYear[]
}

model Attendance {
  id             Int             @id @default(autoincrement())
  studentId      Int
  state          AttendanceState
  date           DateTime
  userId         Int
  academicYearId Int
  timeSlotId     Int
  groupId        Int
  processed      Boolean         @default(false)
  notified       Boolean         @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  User            User              @relation(fields: [userId], references: [id])
  Student         Student           @relation(fields: [studentId], references: [id])
  AcademicYear    AcademicYear      @relation(fields: [academicYearId], references: [id])
  TimeSlot        TimeSlot          @relation(fields: [timeSlotId], references: [id])
  Group           Group             @relation(fields: [groupId], references: [id])
  AttendanceAudit AttendanceAudit[]
  FirstAbsence    AbsencePeriod[]   @relation(name: "FirstAbsence")
  LastAbsence     AbsencePeriod[]   @relation(name: "LastAbsence")
  NextPresence    AbsencePeriod[]   @relation(name: "NextPresence")

  @@index([studentId, date])
}

model AttendanceAudit {
  id             Int             @id @default(autoincrement())
  attendanceId   Int
  state          AttendanceState
  date           DateTime
  userId         Int
  academicYearId Int
  timeSlotId     Int
  groupId        Int
  processed      Boolean
  notified       Boolean
  changedBy      Int
  changedAt      DateTime        @default(now())

  Attendance    Attendance   @relation(fields: [attendanceId], references: [id])
  AcademicYear  AcademicYear @relation(fields: [academicYearId], references: [id])
  TimeSlot      TimeSlot     @relation(fields: [timeSlotId], references: [id])
  ChangedByUser User         @relation(name: "ChangedByUser", fields: [changedBy], references: [id])
  User          User         @relation(name: "User", fields: [userId], references: [id])
}

model DisciplinaryReport {
  id          Int      @id @default(autoincrement())
  studentId   Int
  createdById Int
  date        DateTime
  description String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  CreatedBy User    @relation(fields: [createdById], references: [id])
  Student   Student @relation(fields: [studentId], references: [id])
}

model ApiKey {
  id        Int      @id @default(autoincrement())
  name      String
  key       String   @unique
  userId    Int
  expiresAt DateTime
  enabled   Boolean  @default(true)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  User User @relation(fields: [userId], references: [id])
}

// Many to Many relations, between GradePeriod and AcademicYear
model GradePeriodAcademicYear {
  id             Int @id @default(autoincrement())
  gradePeriodId  Int
  academicYearId Int

  GradePeriod  GradePeriod  @relation(fields: [gradePeriodId], references: [id])
  AcademicYear AcademicYear @relation(fields: [academicYearId], references: [id])
}

// Many to Many relations, between User and Class
model UserClass {
  id      Int @id @default(autoincrement())
  userId  Int
  classId Int

  User  User  @relation(fields: [userId], references: [id])
  Class Class @relation(fields: [classId], references: [id])
}

// Many to Many relations, between User and Group
model UserGroup {
  id      Int @id @default(autoincrement())
  userId  Int
  groupId Int

  User  User  @relation(fields: [userId], references: [id])
  Group Group @relation(fields: [groupId], references: [id])
}

// Many to Many relations, between Student and Group
model StudentGroup {
  id        Int @id @default(autoincrement())
  studentId Int
  groupId   Int

  Student Student @relation(fields: [studentId], references: [id])
  Group   Group   @relation(fields: [groupId], references: [id])
}
