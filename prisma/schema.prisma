// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

enum Role {
  ADMIN
  MANAGER
  TEACHER
}

enum PresenceState {
  PRESENT
  ABSENT
  LATE
  EXCUSED
}

model AcademicYear {
  id           Int                       @id @default(autoincrement())
  name         String
  startDate    DateTime
  endDate      DateTime
  createdAt    DateTime                  @default(now())
  updatedAt    DateTime                  @updatedAt
  archives     Boolean                   @default(false)
  courses      Course[]
  presences    Presence[]
  gradePeriods GradePeriodAcademicYear[]
}

model SchoolLevel {
  id        Int        @id @default(autoincrement())
  name      String
  order     Int
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  classes   Class[]
  TimeSlot  TimeSlot[]
}

model Subject {
  id        Int      @id @default(autoincrement())
  name      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  grades    Grade[]
  Course    Course[]
}

model User {
  id                 Int                  @id @default(autoincrement())
  firstName          String
  lastName           String
  email              String?              @unique
  password           String
  role               Role
  enabled            Boolean              @default(true)
  createdAt          DateTime             @default(now())
  updatedAt          DateTime             @updatedAt
  Presence           Presence[]
  DisciplinaryReport DisciplinaryReport[]
  Course             Course[]
  ClassUser          ClassUser[]
  ApiKey             ApiKey[]
}

model Class {
  id            Int         @id @default(autoincrement())
  name          String
  schoolLevel   SchoolLevel @relation(fields: [schoolLevelId], references: [id])
  schoolLevelId Int
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  students      Student[]
  classUsers    ClassUser[]
}

model Student {
  id                  Int                  @id @default(autoincrement())
  firstName           String
  lastName            String
  dateOfBirth         DateTime?
  class               Class?               @relation(fields: [classId], references: [id])
  classId             Int?
  contactEmail        String?
  enabled             Boolean              @default(true)
  createdAt           DateTime             @default(now())
  updatedAt           DateTime             @updatedAt
  grades              Grade[]
  disciplinaryReports DisciplinaryReport[]
  Presence            Presence[]
}

model Grade {
  id            Int         @id @default(autoincrement())
  value         Float
  student       Student     @relation(fields: [studentId], references: [id])
  studentId     Int
  subject       Subject     @relation(fields: [subjectId], references: [id])
  subjectId     Int
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  GradePeriod   GradePeriod @relation(fields: [gradePeriodId], references: [id])
  gradePeriodId Int
}

model TimeSlot {
  id            Int          @id @default(autoincrement())
  name          String?
  startTime     String
  endTime       String
  Presence      Presence[]
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt
  SchoolLevel   SchoolLevel? @relation(fields: [schoolLevelId], references: [id])
  schoolLevelId Int?
}

// Many to many relationship between User and Class
model ClassUser {
  id      Int   @id @default(autoincrement())
  userId  Int
  classId Int
  user    User  @relation(fields: [userId], references: [id])
  class   Class @relation(fields: [classId], references: [id])
}

model Course {
  id             Int          @id @default(autoincrement())
  name           String
  description    String?
  subject        Subject      @relation(fields: [subjectId], references: [id])
  subjectId      Int
  teacher        User         @relation(fields: [teacherId], references: [id])
  teacherId      Int
  academicYear   AcademicYear @relation(fields: [academicYearId], references: [id])
  academicYearId Int
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
}

model GradePeriod {
  id            Int                       @id @default(autoincrement())
  name          String
  startDate     DateTime
  endDate       DateTime
  createdAt     DateTime                  @default(now())
  updatedAt     DateTime                  @updatedAt
  grades        Grade[]
  academicYears GradePeriodAcademicYear[]
}

// Many to many relationship between GradePeriod and AcademicYear
model GradePeriodAcademicYear {
  id             Int          @id @default(autoincrement())
  gradePeriodId  Int
  academicYearId Int
  gradePeriod    GradePeriod  @relation(fields: [gradePeriodId], references: [id])
  academicYear   AcademicYear @relation(fields: [academicYearId], references: [id])
}

model Presence {
  id             Int           @id @default(autoincrement())
  student        Student       @relation(fields: [studentId], references: [id])
  studentId      Int
  state          PresenceState
  date           DateTime
  user           User          @relation(fields: [userId], references: [id])
  userId         Int
  academicYear   AcademicYear  @relation(fields: [academicYearId], references: [id])
  academicYearId Int
  timeSlot       TimeSlot      @relation(fields: [timeSlotId], references: [id])
  timeSlotId     Int
  processed      Boolean       @default(false)
  notified       Boolean       @default(false)
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
}

model DisciplinaryReport {
  id          Int      @id @default(autoincrement())
  student     Student  @relation(fields: [studentId], references: [id])
  studentId   Int
  createdById Int
  createdBy   User     @relation(fields: [createdById], references: [id])
  date        DateTime
  description String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model ApiKey {
  id        Int      @id @default(autoincrement())
  name      String
  key       String
  user      User     @relation(fields: [userId], references: [id])
  userId    Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
