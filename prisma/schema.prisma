// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id                 Int                  @id @default(autoincrement())
  firstName          String
  lastName           String
  email              String?              @unique
  password           String
  role               Int
  createdAt          DateTime             @default(now())
  updatedAt          DateTime             @updatedAt
  Class              Class[]
  Presence           Presence[]
  DisciplinaryReport DisciplinaryReport[]
}

model SchoolLevel {
  id        Int        @id @default(autoincrement())
  name      String
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  classes   Class[]
  TimeSlot  TimeSlot[]
}

model Class {
  id            Int         @id @default(autoincrement())
  name          String
  schoolLevel   SchoolLevel @relation(fields: [schoolLevelId], references: [id])
  schoolLevelId Int
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  students      Student[]
  User          User?       @relation(fields: [userId], references: [id])
  userId        Int?
}

model Student {
  id                  Int                  @id @default(autoincrement())
  firstName           String
  lastName            String
  dateOfBirth         DateTime?
  class               Class?               @relation(fields: [classId], references: [id])
  classId             Int?
  contactEmail        String?
  createdAt           DateTime             @default(now())
  updatedAt           DateTime             @updatedAt
  grades              Grade[]
  disciplinaryReports DisciplinaryReport[]
  Presence            Presence[]
}

model Subject {
  id        Int        @id @default(autoincrement())
  name      String
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  grades    Grade[]
  Presence  Presence[]
}

model Grade {
  id        Int      @id @default(autoincrement())
  value     Float
  student   Student  @relation(fields: [studentId], references: [id])
  studentId Int
  subject   Subject  @relation(fields: [subjectId], references: [id])
  subjectId Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model TimeSlot {
  id            Int          @id @default(autoincrement())
  name          String?
  // startTime and endTime is string
  // because we don't need to know the date
  startTime     String
  endTime       String
  Presence      Presence[]
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt
  SchoolLevel   SchoolLevel? @relation(fields: [schoolLevelId], references: [id])
  schoolLevelId Int?
}

model Presence {
  id         Int      @id @default(autoincrement())
  student    Student  @relation(fields: [studentId], references: [id])
  studentId  Int
  state      Int
  date       DateTime
  user       User     @relation(fields: [userId], references: [id])
  userId     Int
  timeSlot   TimeSlot @relation(fields: [timeSlotId], references: [id])
  timeSlotId Int
  Subject    Subject? @relation(fields: [subjectId], references: [id])
  subjectId  Int?
}

model DisciplinaryReport {
  id          Int      @id @default(autoincrement())
  student     Student  @relation(fields: [studentId], references: [id])
  studentId   Int
  createdById Int
  createdBy   User     @relation(fields: [createdById], references: [id])
  date        DateTime
  description String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}
